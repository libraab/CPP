/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: abouhlel <abouhlel@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/04/07 14:40:56 by abouhlel          #+#    #+#             */
/*   Updated: 2022/04/07 14:48:21 by abouhlel         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <string>
#include <iostream>
#include <stdint.h>

struct Data
{
	std::string x;
	std::string y;
	int	    z;;
};

uintptr_t serialize(Data* ptr)
{
	uintptr_t x = reinterpret_cast <uintptr_t> (ptr);
	return (x);
}

Data* deserialize(uintptr_t raw)
{
	Data* y = reinterpret_cast <Data *> (raw);
	return (y);
}

int main(void)
{



	Data		*data			= new Data;
	uintptr_t	seralize_test		= 0;
	Data		*deseralize_test	= NULL;

	data->x = "Hello";
	data->y = "World";
	data->z = 42;

	std::cout << "➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖" << std::endl;
	std::cout << "Seralization & Deseralization test with Structure" << std::endl;
	seralize_test = serialize(data);
	deseralize_test = deserialize(seralize_test);

	std::cout << "Unintptr_ t: " << seralize_test << std::endl;
	std::cout << "x --> ";
	if (!deseralize_test->x.compare(data->x))
		std::cout << "Same value" << std::endl;
	else
		 std::cout << "Differentvalue" << std::endl;
	std::cout << "y --> ";
	if (!deseralize_test->y.compare(data->y))
		std::cout << "Same value" << std::endl;
	else
		std::cout << "Differnt value" << std::endl;
	
	std::cout << "-> Using struct after:" << std::endl;
	std::cout << "   Data: " << data->x << " - " << data->y << std::endl;
	delete data;
	return (0);
}
